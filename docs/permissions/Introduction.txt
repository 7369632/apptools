Permissions Framework - Introduction
====================================

The Permissions Framework is a component of the Enthought Tool Suite that
provides developers with the facility to limit access to parts of an
application unless the user is appropriately authorised.  In other words it
enables and disables different parts of the GUI according to the identity of
the user.

The framework includes an API to allow it to be integrated with an
organisation's existing security infrastructure, for example to look users up
in a corporate LDAP directory.

The framework is completely configurable.  Alternate implementations of all
major components can be provided if necessary.  The default implementations
provide a simple local filesystem user database and allows roles to be defined
and assigned to users.

The framework **does not** provide any facility for protecting access to data.
It is not possible to implement such protection in Python and using the file
security provided by a typical operating system.


Framework Concepts
------------------

The following are the concepts supported by the framework.

- Permission

  A permission is the basic tool that a developer uses to specify that access
  to a part of the application should be restricted.  If the current user has
  the permission then access is granted.  A permission may be attached to a
  PyFace action, to an item of a TraitsUI view, or to a GUI toolkit specific
  widget.  When the user is denied access, the corresponding GUI control is
  disabled or completely hidden.

- User

  Each application has a current user who is either *authorised* or
  *unauthorised*.  In order to become authorised a user must identify
  themselves and authenticate that identity.

- Permissions Policy

  The permissions policy is responsible for assigning permissions to users and
  for checking whether the current user has a particular permission.  To do
  this it must maintain a persistent record of what permissions have been
  granted to each user.  The permissions policy is also responsible for
  supplying a user manager.
  
  The default permissions policy supplied with the framework uses roles to make
  it easier for an administrator to manage the relationships between
  permissions and users.  A role is defined as a named set of permissions, and
  a user may have one or more roles assigned to them.

  The permissions policy persists its data in a permissions database.  The
  default permissions policy provides an API so that different implementations
  of the permissions database can be used (for example to store the data in an
  RDBMS).  A default permissions database is provided that pickles the data in
  a local file.

- User Manager

  The user manager is responsible for authorising the current user and,
  therefore, determines how that is done.  It also provides information about
  the user population to the permissions policy.  It may also, optionally,
  provide the ability to manage the user population (eg. add or delete users).
  The user manager must either maintain a persistent record of the user
  population, or interface with an external user database or directory service.

  The default user manager supplied by the default permissions policy uses
  password based authorisation.
  
  The user manager persists its data in a user database.  The default user
  manager provides an API so that different implementations of the user
  database can be used (for example to store the data in an RDBMS, or to
  integrate with an existing directory service).  A default user database is
  provided that pickles the data in a local file.

- Permissions Manager

  The permissions manager is a singleton object used to get and set the current
  permissions policy and user manager.

**FIXME:** We need to say something about how alternative user managers (and
permissions policies) would be delivered - as Envisage3 plugins seems to be the
obvious choice, unless plain eggs would do.


Framework APIs
--------------

The APIs provided by the permissions framework can be split into the following
groups.

- `Application API`_

  This part of the API is used by application developers.

- `Permissions Policy API`_

  This is the interface that an alternative permissions policy must implement.
  The need to implement an alternative is expected to be very rare and so the
  API isn't covered further.  See the definition of the IPermissionsPolicy
  interface for the details.

- `Default Permissions Policy Data API`_

  This part of the API is used by developers to store the policy's persistent
  data in a more secure location (eg. on a remote server) than that provided by
  the default implementation.

- `User Manager API`_

  This is the interface that an alternative user manager must implement.  The
  need to implement an alternative is expected to be very rare and so the API
  isn't covered further.  See the definition of the IUserManager interface for
  the details.

- `Default User Manager Data API`_

  This part of the API is used by developers to store the user database in a
  more secure location (eg. on a remote server) than that provided by the
  default implementation.

The complete API_ documentation is available as endo generated HTML.


Using the Default Implementations
---------------------------------

The default permissions policy and its default user manager both (again by
default) persist their data as pickles in local files called
``ets_perms_permsdb`` and ``ets_perms_userdb`` respectively.  By default these
are stored in the application's home directory (ie. that returned by
``ETSConfig.application_home``).

Note that this directory is normally in the user's own directory structure
whereas it needs to be available to all users of the application.

If the ``ETS_PERMS_DATA_DIR`` environment variable is set then its value is
used instead.

The directory must be writeable by all users of the application.

It should be restated that the default implementations do *not* provide secure
access to the permissions and user data.  They are useful in a cooperative
environment and as working examples.


.. _API: api/index.html
.. _`Application API`: ApplicationAPI.html
.. _`Permissions Policy API`: https://svn.enthought.com/enthought/browser/AppTools/trunk/enthought/permissions/i_permissions_policy.py
.. _`Default Permissions Policy Data API`: DefaultPermissionsPolicyDataAPI.html
.. _`User Manager API`: https://svn.enthought.com/enthought/browser/AppTools/trunk/enthought/permissions/i_user_manager.py
.. _`Default User Manager Data API`: DefaultUserManagerDataAPI.html
